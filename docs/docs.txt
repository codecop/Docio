doc Docio categories 
`DocsParser docsMap` sorted by categories.
------
doc Docio packagePath
------
doc Docio packageInfo 
Returns package.json as an instance of Map.
------
doc Docio packageName
------
doc Docio templatePath
------
doc Docio copyTemplate(templateDir)
------
doc Docio extractDocs 
Generates `docs.txt` using [DocsExtractor](docsextractor.html).
------
doc Docio generateSite 
Use this only after you did parsing.
------
doc Docio getDocsTxt
------
doc Docio openDocsForPackageWithName(packageName)
------
doc Docio DocsParser 
[DocsParser](docsparser.html)
------
doc Docio PageGenerator 
[PageGenerator](pagegenerator.html)
------
doc Docio outputPath 
Path to the `docs` in the destination package's directory.
------
doc Docio generateDocs 
Generates documentation for the package at `packagePath`.
------
doc Docio printDocFor(query)
Prints documentation for the given `query`.

The method will try to extract the documentation from the `doc` comments, 
if the `docs/docs.txt` doesn't exist in the package's directory.

Examples of query:
```
"ProtoName"
"ProtoName slotName"
"AddonName ProtoName slotName"
```
------
metadoc Docio category 
API
------
doc DocsParser docsMap 
The map generated after parse process.
------
doc DocsParser parse 
Parses `docs.txt` generated by [DocsExtractor] and fills up the `docsMap`.
------
metadoc DocsParser category 
API
------
doc PageGenerator init
------
doc PageGenerator generateSite
------
doc PageGenerator generateMainPage 
Generates the `index.html` from the `main_template.html`.
------
doc PageGenerator generatePrototypesPages 
Generates a page for each of the prototype of the given map. 
This method creates a page for each object from the prototype_template.html.
------
metadoc PageGenerator category 
API
------
metadoc PageGenerator description 
Generates documentation pages.
------
metadoc 01_Introduction category 
Guide
------
metadoc 01_Introduction description
Docio is the documentation generator for Eerie (the Io package manager). It
generates documentation from the comments in your source code.

In the end Docio provides you with an HTML documentation pack, which you can
deploy as a static site or use locally. It also generates `docs.txt`, which is
used by Docio to print you documentation in the Io REPL.

Docio comes with a default template, based on [uikit](http://getuikit.com). But
you can use your own templates.

As an example, this site is generated by Docio.

The source code is available [here](https://github.com/IoLanguage/docio).

[Next](02_usage.html)
------
metadoc 02_Usage category 
Guide
------
metadoc 02_Usage description
Docio comes with a command line application `docio`, that you can use 
like this: 

<pre><code class="language-shell">docio --package=/path/to/package [--template=/path/to/template]
</code></pre>

After running, it will search recursively for files with extensions "io", "docio",
"c" and "m" in the directories `source` and `io`, then it'll extract documentation from
it and compile HTML using the provided or the default template. After that it will 
put all the documentation in the `docs` folder of the package directory.

You'll also find useful [`Docio printDocFor(query)`](docio.html).

[Next](03_commentsformat.html)
------
metadoc 03_CommentsFormat category 
Guide
------
metadoc 03_CommentsFormat description
Use single- or multiline comments with following keyword `doc` or `metadoc`.

Firstly add your object to a category. The category can be named any you like.

<pre><code class="language-io">&#47;&#47;metadoc Prototype category API
</code></pre>

>  Instead of `category` you can use any keyword - all following this keyword will be
>  available in `DocsParser docsMap` and `Docio categories`.

Then add an optional description to the object:

<pre><code class="language-io">&#47;*metadoc Prototype description
Some desciption.*&#47;
</code></pre>

Then comment your public API:

<pre><code class="language-io">&#47;&#47;doc Prototype slotName(args) Description</code></pre>

You can use markdown in your comments. It will be parsed to equivalent HTML code during generation.

[Next](04_creatingtemplates.html)
------
metadoc 04_CreatingTemplates category 
Guide
------
metadoc 04_CreatingTemplates description
You should provide two template files: `main_template.html` and `prototype_template.html`.

The first one is used to generate the main page. The second one is for the documentation pages.

In the HTML files you can use Io code:

<pre><code class="language-io">&lt;h1>#{"Hello"}&lt;/h1>
</code></pre>

Check out Docio's default template [directory](https://github.com/AlesTsurko/docio/tree/master/template) to get an example.
------
